What is database?
- A collection of data
Word Database : Data meaning information, base meaning collection

Why do we need a database?
- To save and retrieve all kinds of information.

Why is database a recommended approach?
- flexibility with increase in data
- central collection of all the information
- Reporting & consolidation of data

Different database options:
- Oracle (11g, 12c) - PQL
- MySQL (free community)  
- MSSQL (Microsoft)

CRUD - operations:
There are only 4 set of operations you can perform on a database.
- Create the information on db
- Read the information from the db
- Update the information in the db
- Delete the infomation from the db

Database is a collection of tables.
SQL - structured query language

Tables ::
All the data from a website is stored in tables.
A table consists of rows & columns.

Table Schema



Auto Increment:
Increasing the last value by one.

Null: Nothing or no data available


Querying the data -

SELECT * FROM studentdb.students

Sorting the data -

ORDER BY : sorting the result set by using ORDER BY clause
asc means ascending order (by default)
desc means descending order (you will need to specify this)

Filtering the data - 

- WHERE - filter rows based on specific condition

select * from studentdb.students where Email is not null
select * from studentdb.students where Email is null

Question: Get Names of the countries which do not have Independence Year. Sorted alphabatically.
Answer: SELECT Name FROM world.country Where IndepYear is null Order by Name

- AND - to form complex condition for filtering the data.
	With AND all the conditions must be true (fulfilled)

- OR - With OR one of the conditions must be true (fulfilled)

- IN - to determine if a value matches any value in the list.

- BETWEEN - to query based on the a range

- Like - to query based on a specific pattern
  % wild card matches any string of zero or more characters
  _ wildcard matches any single character

- LIMIT - use to limit the number of rows returned by select statement

- IS NULL - test whether a value is NULL or not by using IS NULL operator


Question: Get the names of the countries which got independence in the year 1950 to 1970 in the 
continent of Asia sorted by population.
Answer: SELECT * FROM world.country
Where IndepYear BETWEEN 1950 AND 1970 
AND
Continent = 'Asia'
Order by Population desc

---------------------------------------------------------------------------------------------
Creating or Modifying data in database

INSERT - statement is use to insert data in the table
INSERT Multiple Rows - insert multiple rows into a table

UPDATE - statement is use to update an already existing row/rows inside the table

DELETE - statement is use to delete

Question: Update student table columns Email & Address for Records which have 
Id as 1,2 or 3.
Answer: UPDATE studentdb.students 
SET Email = 'updated@yahoo.com', 
Address = '100 City Centre Dr, Mississauga'
WHERE Id in (1,2,3)

----------------------------------------------------------------------------------------------
Datatypes -
Integer (INT) Range: -2147483648 to 2147483647
Varchar: to store combinations of letters and numbers.
Decimal: to accept values which have precision in decimal. Ex: Money data
Boolean : 1 - true, 0 - false . Ex: Completed
TimeStamp: It holds combination of date and time. YYYY-MM-DD HH:MM:SS. Ex: '2020-11-19 20:37:45'
JSON: allows you to store JSON data type or documents of upto 4GB in size.

-----------------------------------------------------------------------------------------------
Constraints --

Primary Key: 
Primary key uniquely identifies each record in a table.
Primary key is a column usually with numbers which identifies the entire row.

Unique Constraint:
To make sure the column values are unique.

Foreign Key: 
A foreign key is a column in a table that links to a column in another table.
It helps to maintain rederential integrity.

Not Null Constraint: The column will not accept null values.

Binary (B): stores binary strings, combination of 1 & 0's.
Unsigned (UN): non-negative numbers only.
Zero-Filled (ZF): fills up zero, ex: INT(5) 00004
Generated (G): value is generated by a formula based on the other columns

----------------------------------------------------------------------------------------------

Grouping data

GROUP BY - Shows how to group rows into group based on columns
HAVING - filter conditions for a group of rows, it's often used with Group By clause.
WITH ROLLUP - gives a total of the group by column data (mostly use for finding the total of records)

Question: Get the number of countries and the type of goverentment formed in them.
Answer: SELECT  GovernmentForm ,COUNT(*) FROM world.country
GROUP BY  GovernmentForm WITH ROLLUP

---------------------------------------------------------------------------------------------

Subqueries

subquery is called an inner query while the query that contains the subquery is called an
outer query. 
A subquery can be used anywhere that expression is used and must be closed in parentheses.

Question: Get name of city with highest population in Asia.
Answer: 

SELECT * FROM world.city
Where CountryCode IN (SELECT Code FROM world.country
Where Continent = 'Asia')
order by Population desc
LIMIT 1


Question: Get list of languages spoken in the top 5 countries based on the size of the country.
Answer: 
SELECT * FROM world.countrylanguage
WHERE CountryCode IN ( SELECT Code FROM world.country
Order by SurfaceArea desc)
AND IsOfficial = 'T'
limit 5


Question: Get the top 3 countries with highest number of cities.
Answer: SELECT CountryCode, Count(*) as num FROM world.city
Group by CountryCode
order by num desc
----------------------------------------------------------------------------------------------

Joining Tables

A join is a method of linking data between one or more tables based on values of the common 
column between the tables.

1. Inner Join
2. Left Join
3. Right Join
4. Cross Join
5. Self Join

SELECT columnNames
FROM table 1
JOIN table 2 ON t1.id = t2.id

1. Inner Join: gets the values present in both the tables.

2. Left Join: selects all rows from the left table and common rows present in the right table.
(if no data it will give you null values)

3. Right Join: selects all rows from the right table and common rows present in the left table.
(exactly opposite of left join)

4. Cross Join: this is a cartesian product of rows from the joined tables.
(doesn't have the ON condition)

5. Self Join: join a table to itself using alias and connect rows within the same 
table using inner join and left join.

SELECT e1.employee_id, e1.employee_name,e2.employee_name as Manager
FROM employeedb.employee_details e1
INNER JOIN employeedb.employee_details e2
ON e2.employee_id = e1.employee_reports_to

Question: Get name of city with highest population in Asia.
Answer: 
SELECT ci.Name, ci.Population
FROM world.country co
inner join world.city ci
ON co.Code = ci.CountryCode
WHERE co.Continent = 'Asia'
Order by ci.Population desc
Limit 1

Question: Get list of languages spoken in the top 5 countries based on the size of the country.
Answer:
SELECT Language, co.Name
From world.country co
inner join world.countrylanguage cl
on co.Code = cl.CountryCode
where IsOfficial= 'T'
order by SurfaceArea desc
limit 5

Question: Get the top 3 countries with highest number of cities.
Answer: Same as above.


Question: Get the list of all countries and their respective cities in Region of North America.
Answer: 
SELECT * FROM world.country co
left join world.city ci ON co.Code = ci.CountryCode
WHERE co.Continent = 'Antarctica'

------------------------------------------------------------------------------------------------

Transaction:
A transcation is a sequential group of database manipulation operations, which is performed as
if it were one single work unit.

A trasaction has to contain more than one database manipulation, all of the steps has to be success or if one fails the entire trasaction fails.

COMMIT : Making changes permanent. By Default it is autocommit.
ROLLBACK: Revert the changes done in current transaction.

START TRANSACTION;

INSERT INTO `studentdb`.`students`
(`FirstName`,
`LastName`,
`Email`,
`Address`)
VALUES
('Tom',
'Holland',
'tom@yahoo.com',
'Toronto');

COMMIT;


START TRANSACTION;

INSERT INTO `studentdb`.`students`
(`FirstName`,
`LastName`,
`Email`,
`Address`)
VALUES
('Tom',
'Holland',
'tom@yahoo.com',
'Toronto');

ROLLBACK;
--------------------------------------------------------------------------------

