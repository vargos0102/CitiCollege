Revision:
        // variables: int speed = 100; speed(variable); String name = "Alex", (name is the variable)
        // Data types (Primitive): int, String, char, boolean, float, LocalDate(java.time.LocalDate)
        // Operators: +, -, *, /, ++
	// Common String functions: indexOf(" "), concat(parameter), length(), toUpperCase()
	// Common Math functions: Math.abs(param),  Math.max(para1, para2), Math.min(para1, para2), 
	   Math.sqrt(para1), Math.random() 
	// Booleans: true or false values, ex: bool flag = true;
	// if..else statement: if(condition) {} else {}
	// Switch statement: switch(value) {case 1: break;}
	// for loop: for(int i = 0; i<number;i++){}
	// for each loop: for(String i: array){} 
	// while loop: while (condition) {}
        // do while loop: do {} while(condition)
	// break, meaning stop in a loop. while () { if(i==4){ break; } }
        // continue, meaning skip and go to next. while(condition) { if(i==4){ continue; } }
        // Arrays: it a collection of any datatype.
	// Method: to keep repetative logic/operation in one place and to reuse it for different inputs.	
	    // public : it can be called or accessed by anyone(any other method)
    	   // void : it returns nothing
          // () : input parameters, separated by comma (,,,)
	// method overloading:
	// 1. number of input parameters are changing
	// 2. Data type is different
	// 3. Return type is different
       --- 
 	// Class, Objects, Class Methods, Constructors (default values) 
        // Java Packages : Built-in (java.util.*)  and User-defined packages(citi.May06.Employee)
        // Java User Input(System.util.Scanner): to read the user provided input.
        // OOPS: Object Oriented Programming Languages(Java, C#, Python, Go)
	// Modifiers
	// private: It can only be accessed only in the same class.
	// public: It can be accessed inside or outside class.
	// protected: It can be accessed within same package and subclasses.	
        // 4 Major pillars of OOPS: 
	     - Encapsulation: to group information or hide information from users (Getter and Setter methods)
             - Inheritance: Passing of attributes and methods from Parent to Child class. EXTENDS.
             - Polymorphism (Run-time Overloading): A method which behaves differently based on the parent-child relationship of two classes
             - Abstraction: Data hiding
		- class: You can't instantiate a class
		- method: Abstract methods can't have a body (can't exist without an abstract class)
	//Interface:skeleton which a class should follow.(Interface would only contain declarations, you can't provide definition(body) for any function)
	//ArrayList: It's resizable array inlike the Array (java.util.ArrayList)
	//HashMap: its a collection of key value pair.
---------------------------------------------------------------------------------------------------------------------------------------
Exceptions: 

Q1. Can you have multiple catch blocks?
Yes

Q2. Can try block exist without catch?
Yes only try and finally can exist.
















